const { chromium } = require('playwright');
const fs = require('fs').promises;
const config = require('./config/config.js');
const logger = require('./utils/logger.js'); 
const delays = require('./utils/delays.js'); 
const imageAnalyzer = require('./services/image-analyzer.js'); 
const BrowserManager = require('./core/browser-manager.js'); 
const commentParser = require('./services/comment-parser.js'); 
const commentGenerator = require('./services/comment-generator.js'); 
const commentBuffer = require('./services/comment-buffer.js');  

class InstagramBot {
    constructor() {
        this.browserManager = new BrowserManager(config);
        this.page = null;
        this.config = {
      targetProfile: config.instagram.targetProfile,
      comment: config.instagram.comment,
      timeouts: config.timeouts,
      delays: config.delays
    };
  }
  async init() {
      logger.info('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –§–ò–õ–¨–¢–†–ê–¶–ò–ï–ô –ü–û–°–¢–û–í (—Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–æ—Å—Ç—ã)...');
      if (!delays.isActiveTime()) {
          logger.info('‚è∞ –ù–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.');
          return false;
      }

      const browserInitialized = await this.browserManager.init();
      if (!browserInitialized) {
          return false;
      }

      this.page = this.browserManager.getPage();
      return true;
  }

  async login() {
  try {
  await this.browserManager.loadSession();
      logger.info('üîê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Instagram...');
      await this.page.goto('https://www.instagram.com', { 
        waitUntil: 'domcontentloaded',
        timeout: this.config.timeouts.navigation 
      });
      
      await this.page.waitForTimeout(3000);

      try {
        await this.page.waitForSelector('svg[aria-label="Home"], [aria-label="Home"], a[href="/"]', { 
          timeout: 8000 
        });
        logger.success('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
        return true;
      } catch {
        logger.success('üîë –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
        logger.success('üìù –í–æ–π–¥–∏—Ç–µ –≤ Instagram –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...');
        
        await new Promise(resolve => {
          process.stdin.once('data', () => {
            logger.info('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...');
            resolve();
          });
        });
        
        await this.browserManager.saveSession();

        return true;
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', { message: error.message });
      return false;
    }
    }

  // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ—Å—Ç–æ–≤
  async findAndClickActualPost() {
      try {
          logger.action('–ò—â–µ–º –ù–ê–°–¢–û–Ø–©–ò–ï –ü–û–°–¢–´ (–∏—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –∏—Å—Ç–æ—Ä–∏–∏)');
          
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Ñ–∏–ª—é
          logger.info('üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Ñ–∏–ª—é...');
          await this.page.goto(this.config.targetProfile, { 
              waitUntil: 'domcontentloaded',
              timeout: this.config.timeouts.navigation 
          });
          
          await delays.betweenActions();

          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
          const analysisResults = await imageAnalyzer.analyzeAndFilterImages(this.page);
          
          // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –ø–æ—Å—Ç
          const selectedPost = imageAnalyzer.selectBestPost(analysisResults);
          
          if (!selectedPost) {
              throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
          }

          // –ö–ª–∏–∫–∞–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ—Å—Ç—É
          logger.info('\nüñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø–æ—Å—Ç–∞...');
          
          await selectedPost.image.click();
          logger.success(`‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É: A`);
          
          // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
          const href = await selectedPost.image.evaluate(img => {
              const link = img.closest('a');
              return link ? link.href : null;
          });
          
          if (href) {
              logger.info(`   –°—Å—ã–ª–∫–∞: ${href}`);
          }

          await delays.waitForClickResponse();

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–ª—Å—è
          const currentUrl = this.page.url();
          logger.info(`üìç URL –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞: ${currentUrl}`);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å—Ç–∞
          const postOpened = await this.page.evaluate(() => {
              return {
                  hasModal: !!document.querySelector('div[role="dialog"], div[aria-modal="true"], div[class*="modal"]'),
                  hasPostUrl: window.location.pathname.includes('/p/') || window.location.pathname.includes('/reel/'),
                  hasCommentField: !!document.querySelector('textarea, [contenteditable="true"]')
              };
          });

          logger.info(`üì± –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: ${postOpened.hasModal ? '‚úÖ –Ω–∞–π–¥–µ–Ω–æ' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);
          logger.info(`üîó URL –ø–æ—Å—Ç–∞: ${postOpened.hasPostUrl ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
          logger.info(`üí¨ –ü–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ${postOpened.hasCommentField ? '‚úÖ –Ω–∞–π–¥–µ–Ω–æ' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);

          if (postOpened.hasModal || postOpened.hasPostUrl) {logger.success('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!');
              return true;
          } else {
              throw new Error('–ü–æ—Å—Ç –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è - –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–ª–∏ URL –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
          }

          
      } catch (error) {
          logger.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ –∫–ª–∏–∫–∞ –ø–æ –ø–æ—Å—Ç—É', { message: error.message });
          
          try {
              await this.page.screenshot({
                  path: 'post-click-error-screenshot.png',
                  fullPage: true
              });
              logger.info('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏: post-click-error-screenshot.png');
          } catch {}
          
          throw error;
      }
  }

  // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ –ø–æ–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  async commentOnOpenPost() {
    logger.info(`üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–∞—á–∞–ª–æ commentOnOpenPost() - ${Date.now()}`);   
    try {
      logger.info('üí¨ –ò—â–µ–º –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π...');
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      await this.page.waitForTimeout(3000);
      
      // ‚úÖ –°–Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      const pageAnalysis = await this.page.evaluate(() => {
        return {
          title: document.title,
          url: window.location.href,
          textareas: document.querySelectorAll('textarea').length,
          contentEditables: document.querySelectorAll('[contenteditable="true"]').length,
          forms: document.querySelectorAll('form').length,
          buttons: document.querySelectorAll('button').length,
          inputs: document.querySelectorAll('input').length,
          allElements: document.querySelectorAll('*').length
        };
      });
      
      logger.analysis('üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–†–ê–ù–ò–¶–´:');
      logger.analysis(`   URL: ${pageAnalysis.url}`);
      logger.analysis(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${pageAnalysis.title}`);
      logger.analysis(`   Textarea —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${pageAnalysis.textareas}`);
      logger.analysis(`   ContentEditable —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${pageAnalysis.contentEditables}`);
      logger.analysis(`   –§–æ—Ä–º: ${pageAnalysis.forms}`);
      logger.analysis(`   –ö–Ω–æ–ø–æ–∫: ${pageAnalysis.buttons}`);
      logger.analysis(`   Input —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${pageAnalysis.inputs}`);
      
      // ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
      const commentSelectors = [
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        'textarea[aria-label*="–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" i]',
        'textarea[aria-label*="comment" i]',
        'textarea[placeholder*="–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" i]',
        'textarea[placeholder*="comment" i]',
        'textarea[aria-label="Add a comment‚Ä¶"]',
        'textarea[placeholder="Add a comment‚Ä¶"]',
        
        // –†—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        'textarea[aria-label*="–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]',
        'textarea[placeholder*="–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]',
        'textarea[aria-label*="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]',
        'textarea[placeholder*="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]',
        
        // –í –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö
        '[role="dialog"] textarea',
        '[aria-modal="true"] textarea',
        '.modal textarea',
        
        // ContentEditable —ç–ª–µ–º–µ–Ω—Ç—ã
        '[role="textbox"][contenteditable="true"]',
        'div[contenteditable="true"][role="textbox"]',
        '[contenteditable="true"][data-text*="comment" i]',
        '[contenteditable="true"][placeholder*="comment" i]',
        
        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ
        'form textarea',
        'textarea',
        
        // Fallback —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ (–∏—â–µ–º —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
        'button[type="submit"] ~ textarea',
        'button[aria-label*="Post" i] ~ textarea',
        'button[aria-label*="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" i] ~ textarea'
      ];

      let commentField = null;
      let foundSelector = '';
      
      logger.info(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${commentSelectors.length} —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤...`);
      
      // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      for (const selector of commentSelectors) {
        try {
          logger.info(`   –ü—Ä–æ–±—É–µ–º: ${selector}`);
          
          commentField = await this.page.waitForSelector(selector, { 
            timeout: 2000,
            state: 'visible'
          });
          
          if (commentField) {
            foundSelector = selector;
            logger.success(`‚úÖ –ù–ê–ô–î–ï–ù–û! –°–µ–ª–µ–∫—Ç–æ—Ä: ${selector}`);
            break;
          }
        } catch {
          logger.info(`   ‚ùå –ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${selector}`);
          continue;
        }
      }

      if (!commentField) {
        // ‚úÖ –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
        logger.info('üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏...');
        
        const buttonSearch = await this.page.evaluate(() => {
          const buttons = document.querySelectorAll('button');
          const foundButtons = [];
          
          Array.from(buttons).forEach(btn => {
            const text = btn.textContent?.toLowerCase() || '';
            const ariaLabel = btn.getAttribute('aria-label')?.toLowerCase() || '';
            
            if (text.includes('–æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å') || text.includes('post') ||
                ariaLabel.includes('–æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å') || ariaLabel.includes('post')) {
              foundButtons.push({
                text: btn.textContent,
                ariaLabel: btn.getAttribute('aria-label'),
                hasNearbyTextarea: !!btn.parentElement?.querySelector('textarea')
              });
            }
          });
          
          return foundButtons;
        });
        
        logger.info(`   –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${buttonSearch.length}`);
        buttonSearch.forEach(btn => {
          logger.info(`     "${btn.text}" (—Ä—è–¥–æ–º textarea: ${btn.hasNearbyTextarea ? '‚úÖ' : '‚ùå'})`);
        });
        
        throw new Error('–ü–æ–ª–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º');
      }

      // ‚úÖ –†–∞–±–æ—Ç–∞–µ–º —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–æ–ª–µ–º
      logger.info('üéØ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫ –≤–≤–æ–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...');
      
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ–ª—é
      await commentField.scrollIntoViewIfNeeded();
      await delays.waitForClickResponse(); // –ñ–¥—ë–º –æ—Ç–∫–ª–∏–∫–∞
      
      // –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–æ–ª—é
      logger.info('üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–æ–ª—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...');
      await commentField.click();
      await delays.waitForClickResponse(); // –ñ–¥—ë–º –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∫–ª–∏–∫

      // –î–û–ë–ê–í–ò–¢–¨ –°–Æ–î–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–£:
      try {
      // –ü–∞—Ä—Å–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const parsedComments = await commentParser.parseCommentsFromPost(this.page);
      const styleAnalysis = commentParser.analyzeCommentStyle(parsedComments);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±—É—Ñ–µ—Ä
      if (await commentBuffer.needsRefill()) {
          logger.info('üîÑ –ü–æ–ø–æ–ª–Ω—è–µ–º –±—É—Ñ–µ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏...');
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
          const newComments = commentGenerator.generateMultipleComments(5, null, parsedComments, styleAnalysis);
          await commentBuffer.addComments(newComments);
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –±—É—Ñ–µ—Ä–∞
      let selectedComment = await commentBuffer.getNextComment();
      if (!selectedComment) {
          logger.warning('‚ö†Ô∏è –ë—É—Ñ–µ—Ä –ø—É—Å—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...');
          selectedComment = commentGenerator.generateComment(null, parsedComments, styleAnalysis);
      }

      logger.info('‚úèÔ∏è –í–≤–æ–¥–∏–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...');
      await this.page.keyboard.type(selectedComment.text);
      } catch (error) {
        logger.error('üî¨ –ü–û–î–†–û–ë–ù–û–°–¢–ò:', error.stack);
        // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Å–ø–æ—Å–æ–±—É
        logger.info('üî¨ FALLBACK: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        await this.page.keyboard.type(this.config.comment);
      }
      
      logger.success('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤–≤–µ–¥—ë–Ω!');
      await delays.waitForClickResponse(); // –ñ–¥—ë–º –æ—Ç–∫–ª–∏–∫–∞

      // ‚úÖ –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
      logger.info('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"...');
      
      const publishButtons = [
        'button[type="submit"]',
        'button[aria-label*="Post" i]',
        'button[aria-label*="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" i]',
        'button:has-text("Post")',
        'button:has-text("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")',
        '[role="button"][aria-label*="Post" i]'
      ];
      
      let publishButton = null;
      for (const selector of publishButtons) {
        try {
          publishButton = await this.page.waitForSelector(selector, { timeout: 2000 });
          if (publishButton) {
            logger.info(`‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: ${selector}`);
            break;
          }
        } catch {
          continue;
        }
      }
      
      if (publishButton) {
        logger.info('üì§ –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"...');
        await publishButton.click();
        await delays.waitForClickResponse();
      } else {
        logger.info('üì§ –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Enter...');
        await this.page.keyboard.press('Enter');
        await delays.waitForClickResponse();
      }
      
      // –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      await this.page.waitForTimeout(4000);
      
      logger.success('üéâ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!');
      return true;
      
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
      
      try {
        await this.page.screenshot({ 
          path: 'comment-error-detailed-screenshot.png',
          fullPage: true 
        });
        logger.info('üì∏ –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏: comment-error-detailed-screenshot.png');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        const html = await this.page.content();
        await fs.writeFile('comment-error-page-source.html', html);
        logger.info('üìÑ HTML —Å–æ—Ö—Ä–∞–Ω—ë–Ω: comment-error-page-source.html');
      } catch {}
      
      return false;
    }
  }

  async close() {
    await this.browserManager.close();
  }

  async run() {
    try {
      const initSuccess = await this.init();
      if (!initSuccess) return;
      
      const loginSuccess = await this.login();
      if (!loginSuccess) {
        throw new Error('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
      }

      // ‚úÖ –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–º—É –ø–æ—Å—Ç—É (–Ω–µ –ø—Ä–æ—Ñ–∏–ª—é)
      const postResult = await this.findAndClickActualPost();
      if (!postResult) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç');
      }

      // ‚úÖ –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
      const commentSuccess = await this.commentOnOpenPost();
      
      if (commentSuccess) {
        logger.success('‚úÖ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!');
        logger.success('üéä –ü–æ—Å—Ç –Ω–∞–π–¥–µ–Ω, –æ—Ç–∫—Ä—ã—Ç –∏ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω!');
        
        const logEntry = {
          timestamp: new Date().toISOString(),
          comment: this.config.comment,
          status: 'success',
          method: 'filtered_post_click_with_diagnostics'
        };
        
        try {
          let existingLogs = [];
          try {
            existingLogs = JSON.parse(await fs.readFile('comments-log.json', 'utf8'));
          } catch {}
          
          existingLogs.push(logEntry);
          await fs.writeFile('comments-log.json', JSON.stringify(existingLogs, null, 2));
          logger.success('üìù –£—Å–ø–µ—Ö –∑–∞–ø–∏—Å–∞–Ω –≤ –ª–æ–≥');
        } catch {}
        
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
      }
      
    } catch (error) {
      logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      
      if (this.page) {
        try {
          await this.page.screenshot({ path: 'final-error-screenshot.png', fullPage: true });
          logger.info('üì∏ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏: final-error-screenshot.png');
        } catch {}
      }
    } finally {
      await this.close();
    }
  }
}

const bot = new InstagramBot();
bot.run();