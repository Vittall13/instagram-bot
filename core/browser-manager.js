// core/browser-manager.js

const { chromium } = require('playwright');
const fs = require('fs').promises;
const path = require('path');
const logger = require('../utils/logger.js');

class BrowserManager {
  constructor(config) {
    this.config = config;
    this.browser = null;
    this.context = null;
    this.page = null;
    this.profileName = process.env.BOT_PROFILE || 'default';
  }

  // –í—ã—á–∏—Å–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ—Ñ–∏–ª—è –û–î–ò–ù –†–ê–ó
  getUserDataBaseDir() {
    // 1) –Ø–≤–Ω—ã–π –ø—É—Ç—å –∏–∑ .env –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ –≤—Å–µ–≥–æ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)
    if (process.env.BOT_PROFILE_DATA_DIR && process.env.BOT_PROFILE_DATA_DIR.trim()) {
      return process.env.BOT_PROFILE_DATA_DIR.trim();
    }
    // 2) –ï—Å–ª–∏ —è–≤–Ω–æ —Å–∫–∞–∑–∞–ª–∏, —á—Ç–æ —ç—Ç–æ Docker ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º /app
    if ((process.env.RUN_ENV || '').toLowerCase() === 'docker') {
      return '/app';
    }
    // 3) –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ç–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫)
    return process.cwd();
  }

  async ensureWritableDir(dir) {
    await fs.mkdir(dir, { recursive: true });
    const probe = path.join(dir, '.probe');
    try {
      await fs.writeFile(probe, 'ok');
      // –ß–∏—Å—Ç–æ, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ: –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–Ω–∏–∫
      await fs.unlink(probe).catch(() => {});
    } catch (e) {
      throw new Error(`–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å: ${dir} (${e.message})`);
    }
  }

  async init() {
    try {
      const baseDir = this.getUserDataBaseDir();         // /app –ò–õ–ò –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
      const userDataDir = path.join(baseDir, `user-data-${this.profileName}`);

      // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏
      await this.ensureWritableDir(userDataDir);

      // –ó–∞–ø—É—Å–∫–∞–µ–º persistent-–∫–æ–Ω—Ç–µ–∫—Å—Ç
      this.context = await chromium.launchPersistentContext(userDataDir, {
        headless: this.config.browser.headless,
        slowMo: this.config.browser.slowMo,
        viewport: { width: 1280, height: 720 },
        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        locale: process.env.LOCALE || 'ru-RU',
        timezoneId: process.env.TZ || 'Europe/Moscow',
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--no-first-run',
          '--disable-blink-features=AutomationControlled',
          '--disable-web-security',
          // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∏—Å–∫–æ–≤–æ–≥–æ –∫—ç—à–∞ (~150–ú–ë –æ–±—â–∏–π + ~50–ú–ë –º–µ–¥–∏–∞)
          '--disk-cache-size=157286400',
          '--media-cache-size=52428800'
        ]
      });

      const pages = this.context.pages();
      this.page = pages.length > 0 ? pages[0] : await this.context.newPage();

      await this.setupAntiDetection();
      logger.success(`–ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (persistent: ${userDataDir})`);
      return true;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞', { message: error.message });
      return false;
    }
  }

  async setupAntiDetection() {
    await this.page.addInitScript(() => {
      Object.defineProperty(navigator, 'webdriver', { get: () => undefined });
    });
  }

  async loadSession() {
    try {
      const storageState = JSON.parse(await fs.readFile('storage.json', 'utf8'));
      await this.context.addCookies(storageState.cookies || []);
      logger.info('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ –ø—Ä–æ—Ñ–∏–ª—é)');
      return true;
    } catch {
      logger.info('‚ÑπÔ∏è storage.json –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ persistent –ø—Ä–æ—Ñ–∏–ª—å');
      return false;
    }
  }

  async saveSession() {
    try {
      const storageState = await this.context.storageState();
      await fs.writeFile('storage.json', JSON.stringify(storageState, null, 2));
      logger.success('üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è)');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏', { message: error.message });
    }
  }

  async navigateTo(url, options = {}) {
    const defaults = { waitUntil: 'domcontentloaded', timeout: this.config.timeouts.navigation };
    return await this.page.goto(url, { ...defaults, ...options });
  }

  getPage() {
    return this.page;
  }

  async screenshot(filename, options = {}) {
    try {
      await this.page.screenshot({ path: filename, fullPage: true, ...options });
      logger.info(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: ${filename}`);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞', { message: error.message });
    }
  }

  async close() {
    try {
      if (this.context) await this.context.close();
      if (this.browser) await this.browser.close();
      logger.success('üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞', { message: error.message });
    }
  }
}

module.exports = BrowserManager;
