const fs = require('fs').promises;
const path = require('path');

class SafeLogger {
    constructor() {
        this.levels = {
            SILENT: 0,
            SUCCESS: 1,
            ERROR: 2, 
            WARNING: 3,
            INFO: 4,
            DEBUG: 5
        };
        
        this.currentLevel = this.getLevelFromEnv();
        this.enableFileLogging = process.env.ENABLE_FILE_LOGGING === 'true' && 
                                 process.env.NODE_ENV !== 'production'; // –§–∞–π–ª—ã –¢–û–õ–¨–ö–û –≤ dev
        this.colors = {
            error: '\x1b[31m',    // –ö—Ä–∞—Å–Ω—ã–π
            warning: '\x1b[33m',  // –ñ–µ–ª—Ç—ã–π  
            info: '\x1b[36m',     // –ì–æ–ª—É–±–æ–π
            debug: '\x1b[90m',    // –°–µ—Ä—ã–π
            success: '\x1b[32m',  // –ó–µ–ª–µ–Ω—ã–π
            reset: '\x1b[0m'      // –°–±—Ä–æ—Å
        };
    }
    
    getLevelFromEnv() {
        if (process.env.NODE_ENV === 'production') {
            return this.levels.ERROR; // –í production —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏!
        }
        
        const envLevel = process.env.LOG_LEVEL || 'INFO';
        return this.levels[envLevel] || this.levels.INFO;
    }
    
    log(level, message, data = null) {
        if (this.levels[level] > this.currentLevel) return;
        
        const timestamp = new Date().toLocaleString('ru-RU');
        const emoji = this.getEmoji(level);
        const color = this.colors[level] || '';
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–∏–ª—å—Ç—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        const safeMessage = this.sanitizeMessage(message);
        
        // –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        console.log(`${color}${emoji} [${timestamp}] ${safeMessage}${this.colors.reset}`);
        
        // –î–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –≤ DEBUG —Ä–µ–∂–∏–º–µ
        if (data && level === 'DEBUG') {
            console.log(`${this.colors.debug}   –î–∞–Ω–Ω—ã–µ:`, data, `${this.colors.reset}`);
        }
        
        // –§–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¢–û–õ–¨–ö–û –≤ development
        if (this.enableFileLogging && process.env.NODE_ENV !== 'production') {
            this.writeToFile(level, timestamp, safeMessage, data);
        }
    }
    
    async writeToFile(level, timestamp, message, data) {
        try {
            const logDir = path.join(__dirname, '..', 'logs');
            await fs.mkdir(logDir, { recursive: true });
            const file = path.join(logDir, `${new Date().toISOString().split('T')[0]}.log`);
            let line = `[${timestamp}] ${level}: ${message}`;
            if (data && level === 'DEBUG') {
                line += ` ${JSON.stringify(data)}`;
            }
            line += '\n';
            await fs.appendFile(file, line, 'utf8');
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        }
    }
    
    sanitizeMessage(message) {
        // –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return message
            .replace(/password[:\s]*[^\s]*/gi, 'password: ***')
            .replace(/token[:\s]*[^\s]*/gi, 'token: ***')
            .replace(/cookie[:\s]*[^\s]*/gi, 'cookie: ***')
            .replace(/session[:\s]*[^\s]*/gi, 'session: ***');
    }
    
    getEmoji(level) {
        const emojis = {
            ERROR: '‚ùå',
            WARNING: '‚ö†Ô∏è',
            INFO: '‚ÑπÔ∏è',
            DEBUG: 'üîç',
            SUCCESS: '‚úÖ'
        };
        return emojis[level] || '‚ÑπÔ∏è';
    }
    
    // –£–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    error(message, data = null) { this.log('ERROR', message, data); }
    warning(message, data = null) { this.log('WARNING', message, data); }
    info(message, data = null) { this.log('INFO', message, data); }
    debug(message, data = null) { this.log('DEBUG', message, data); }
    success(message, data = null) { this.log('SUCCESS', message, data); }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è Instagram –±–æ—Ç–∞
    action(action, details = '') {
        this.info(`üéØ ${action}${details ? ': ' + details : ''}`);
    }
    
    step(step, number = null) {
        const stepNum = number ? `–®–∞–≥ ${number}: ` : '';
        this.info(`üîÑ ${stepNum}${step}`);
    }
    
    analysis(title, data) {
        this.info(`üìä ${title}`);
        if (this.currentLevel >= this.levels.DEBUG && data) {
            Object.entries(data).forEach(([key, value]) => {
                this.debug(`   ${key}: ${value}`);
            });
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = new SafeLogger();
