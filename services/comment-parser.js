/**
 * –ü–∞—Ä—Å–µ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ Instagram
 * –°–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –ø–æ—Å—Ç–∞
 */

const logger = require('../utils/logger.js');
const delays = require('../utils/delays.js');

class CommentParser {
    constructor() {
        this.config = {
            maxComments: 20,           // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            minCommentLength: 10,      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è  
            maxCommentLength: 500,     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            skipBotPatterns: [         // –ü–∞—Ç—Ç–µ—Ä–Ω—ã bot –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                /^(üëç|‚ù§Ô∏è|üî•|üí™|‚ú®)$/,   // –¢–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏
                /^(—Å–ø–∞—Å–∏–±–æ|thanks)$/i,   // –ö–æ—Ä–æ—Ç–∫–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
                /bot/i,                  // –°–æ–¥–µ—Ä–∂–∏—Ç "bot"
                /instagram\.com/i        // –°–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫–∏
            ]
        };
        this.lastFoundCommentsCount = 0; // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
//        this.usedStrategies = [];      // –ù–µ –∑–Ω–∞—è –∑–∞—á–µ–º.????
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ
     */
    async preparePageForParsing(page) {
    logger.info('üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞...');
    await page.waitForTimeout(2000);
    for (let i = 0; i < 3; i++) {
        await page.evaluate(() => {
        const article = document.querySelector('article');
        if (article) article.scrollTop += 300;
        else window.scrollBy(0, 300);
        });
        await page.waitForTimeout(1500);
    }
    }

    async tryMultipleParsingStrategies(page, targetCount = 20) {
    const strategies = [
        { name: 'current_pattern', selector: 'div._ap3a span[dir="auto"]' },
        { name: 'structural', selector: 'article div div span[dir="auto"]' },
        { name: 'broad', selector: 'span[dir="auto"]' }
    ];
    
    this.usedStrategies = [];
    
    for (const strategy of strategies) {
        try {
            logger.info(`üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è "${strategy.name}": ${strategy.selector} (—Ü–µ–ª—å: ${targetCount})`);
            
            const elements = await page.$$(strategy.selector);
            logger.info(`   –ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
            
            if (elements.length > 0) {
                // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï - –±–µ—Ä–µ–º —Å—Ç–æ–ª—å–∫–æ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ
                const comments = [];
                const maxElements = Math.min(elements.length, targetCount + 5); // +5 –∑–∞–ø–∞—Å –Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                
                for (let i = 0; i < maxElements; i++) {
                    try {
                        const text = await elements[i].textContent();
                        if (text && text.trim().length > 10) {
                            comments.push(text.trim());
                            
                            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏
                            if (comments.length >= targetCount) break;
                        }
                    } catch (error) {
                        continue;
                    }
                }
                
                logger.info(`   –ò–∑–≤–ª–µ—á–µ–Ω–æ ${comments.length} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
                
                if (comments.length >= Math.min(targetCount * 0.7, 10)) {
                    logger.success(`‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è "${strategy.name}" —É—Å–ø–µ—à–Ω–∞!`);
                    this.usedStrategies.push(strategy.name);
                    return comments;
                }
            }
            
        } catch (error) {
            logger.debug(`‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è "${strategy.name}" –æ—à–∏–±–∫–∞: ${error.message}`);
            continue;
        }
    }
    
    logger.warning('‚ö†Ô∏è –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –¥–∞–ª–∏ –Ω—É–∂–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
    return [];
}

    /**
     * –£–ü–†–û–©–ï–ù–ù–ê–Ø –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê v2.1
     */
    async parseCommentsFromPost(page) {
        try {
            logger.info('üìñ –ó–∞–ø—É—Å–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...');
            logger.info('üî¨ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π...');
            
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await this.preparePageForParsing(page);
            
            // –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –≤—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª—å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ó–ê–†–ê–ù–ï–ï
            const excludeCount = this.getExcludeCount();
            const targetUsefulComments = 20; // –°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∏—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            const totalToParse = targetUsefulComments + excludeCount;
            
            logger.info(`üéØ –¶–µ–ª—å: ${targetUsefulComments} –ø–æ–ª–µ–∑–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
            logger.info(`üìä –ë—É–¥–µ–º –ø–∞—Ä—Å–∏—Ç—å ${totalToParse} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (${targetUsefulComments} + ${excludeCount} –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è)`);
            
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ü–µ–ª—å—é
            let comments = await this.tryMultipleParsingStrategies(page, totalToParse);
            logger.info(`üîç –ü–æ—Å–ª–µ tryMultipleParsingStrategies: ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
            
            // –ò—Å–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—ã–µ N –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (—Ç–µ–ø–µ—Ä—å –±–µ–∑ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–∏—Å–∫–ª—é—á–µ–Ω–∏—è!)
            comments = this.filterCommentsByPosition(comments, excludeCount);
            logger.info(`üéØ –ü–æ—Å–ª–µ filterCommentsByPosition: ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
            
            // –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            comments = this.filterServiceMessages(comments);
            logger.info(`üßπ –ü–æ—Å–ª–µ filterServiceMessages: ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
            
            logger.analysis('–î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –ê–î–ê–ü–¢–ò–í–ù–´–ô –ü–ê–†–°–ò–ù–ì', {
                '–¶–µ–ª—å –ø–∞—Ä—Å–∏–Ω–≥–∞': totalToParse,
                '–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤': comments.length,
                '–ò—Å–∫–ª—é—á–µ–Ω–æ –ø–µ—Ä–≤—ã—Ö': excludeCount,
                '–°—Ç—Ä–∞—Ç–µ–≥–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ': this.usedStrategies.length
            });
            
            return comments.slice(0, 20); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º 20 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        } catch (error) {
            console.error('‚ùå DETECTED parseCommentsFromPost ERROR:', error);
            logger.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
            return [];
        }
    }

    /**
     * –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
     */
    isValidComment(text) {
        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (!text || text.length < 10 || text.length > 1000) return false;
        
        // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π –∫–æ–¥
        const excludePatterns = [
            // –°–ª—É–∂–µ–±–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Instagram/JavaScript
            /@media/i, /script/i, /require/i, /bootstrap/i,
            /{"require"/i, /qplTimingsServerJS/i, /CometSSR/i,
            /ajax/i, /comet_req/i, /JSScheduler/i,
            
            // CSS –∏ —Å—Ç–∏–ª–∏
            /prefers-color-scheme/i, /:root{/i, /background/i,
            
            // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            /–∑–Ω–∞—á–æ–∫/i, /—Å—Ç—Ä–µ–ª–∫–∞/i, /arrow/i, /icon/i,
            /–∑–∞–≥—Ä—É–∑–∫–∞/i, /loading/i, /–∫–æ–Ω—Ç–∞–∫—Ç/i, /contact/i,
            
            // –°–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Instagram
            /instagram/i, /–Ω—Ä–∞–≤–∏—Ç—Å—è/i, /like/i, /–æ—Ç–≤–µ—Ç–∏—Ç—å/i, /reply/i,
            /–ø–æ–∫–∞–∑–∞—Ç—å/i, /show/i, /load more/i, /ago/i,
            
            // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
            /x1lliihq/i, /xeuugli/i, /x[0-9a-z]{6}/i // CSS –∫–ª–∞—Å—Å—ã Instagram
        ];
        
        const hasExcludedContent = excludePatterns.some(pattern => pattern.test(text));
        if (hasExcludedContent) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        const hasLetters = /[–∞-—è—ë]/i.test(text) || /[a-z]/i.test(text);
        const hasSpaces = text.includes(' ');
        const notOnlySymbols = !/^[^–∞-—è—ëa-z]*$/i.test(text);
        
        return hasLetters && hasSpaces && notOnlySymbols;
    }

    /**
     * –ù–û–í–´–ô –ú–ï–¢–û–î - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç –º—É—Å–æ—Ä–∞
     */
    filterRealComments(comments) {
        const filtered = [];
        
        for (const comment of comments) {
            // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            if (filtered.includes(comment)) continue;
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ
            if (comment.length < 10 || comment.length > 500) continue;
            
            // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π —Ç–µ–∫—Å—Ç
            const lowerComment = comment.toLowerCase();
            const excludePatterns = [
                // –°–ª—É–∂–µ–±–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Instagram
                'instagram', 'script', 'require', 'bootstrap',
                '@media', 'prefers-color-scheme', 'ajax',
                
                // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                '–Ω—Ä–∞–≤–∏—Ç—Å—è', 'like', '–æ—Ç–≤–µ—Ç–∏—Ç—å', 'reply',
                '–ø–æ–∫–∞–∑–∞—Ç—å', 'show', 'load more', '—Å—Ç—Ä–µ–ª–∫–∞',
                '–∑–Ω–∞—á–æ–∫', 'icon', 'arrow',
                
                // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                'loading', '–∑–∞–≥—Ä—É–∑–∫–∞', 'error', '–æ—à–∏–±–∫–∞'
            ];
            
            const hasExcludedContent = excludePatterns.some(pattern => 
                lowerComment.includes(pattern)
            );
            
            if (!hasExcludedContent) {
                filtered.push(comment);
            }
        }
        
        return filtered;
    }


    /**
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
     */
    filterAndCleanComments(rawComments) {
        const filtered = [];
        
        for (const comment of rawComments) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–µ
            if (comment.length < this.config.minCommentLength || 
                comment.length > this.config.maxCommentLength) {
                continue;
            }

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º bot-–ø–æ–¥–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if (this.isBotLikeComment(comment)) {
                continue;
            }

            // –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            const cleaned = this.cleanComment(comment);
            if (cleaned) {
                filtered.push(cleaned);
            }
        }

        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        return [...new Set(filtered)];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π bot-–ø–æ–¥–æ–±–Ω—ã–º
     */
    isBotLikeComment(comment) {
        return this.config.skipBotPatterns.some(pattern => pattern.test(comment));
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
     */
    cleanComment(comment) {
        return comment
            .replace(/\s+/g, ' ')           // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–∏–Ω
            .replace(/[^\w\s–∞-—è—ë–ê-–Ø–Å!?.,]/gi, '') // –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            .trim();
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∏–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
     */
    analyzeCommentStyle(comments) {
        const analysis = {
            averageLength: 0,
            commonWords: [],
            sentiment: 'neutral',
            style: 'casual'
        };

        if (comments.length === 0) return analysis;

        // –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞
        analysis.averageLength = Math.round(
            comments.reduce((sum, comment) => sum + comment.length, 0) / comments.length
        );

        // –ß–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞ (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        const wordFreq = {};
        comments.forEach(comment => {
            comment.toLowerCase().split(/\s+/).forEach(word => {
                if (word.length > 3) {
                    wordFreq[word] = (wordFreq[word] || 0) + 1;
                }
            });
        });

        analysis.commonWords = Object.entries(wordFreq)
            .sort(([,a], [,b]) => b - a)
            .slice(0, 10)
            .map(([word]) => word);

        logger.analysis('–ê–ù–ê–õ–ò–ó –°–¢–ò–õ–Ø –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í', {
            '–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞': analysis.averageLength,
            '–ß–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞': analysis.commonWords.slice(0, 5).join(', '),
            '–û–±—â–∏–π —Å—Ç–∏–ª—å': analysis.style
        });

        return analysis;
    }

        /**
     * –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –ú–ï–¢–û–î - –∞–Ω–∞–ª–∏–∑ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Instagram
     * –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    async debugInstagramStructure(page) {
        try {
            logger.info('üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–†–£–ö–¢–£–†–´ INSTAGRAM...');
            
            // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await page.waitForTimeout(3000);
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            await page.evaluate(() => {
                window.scrollBy(0, 800);
            });
            await page.waitForTimeout(2000);
            
            // // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            // const html = await page.content();
            // await require('fs').promises.writeFile('instagram-structure.html', html);
            // logger.info('üìÑ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ instagram-structure.html');
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const allSpans = await page.$$eval('span', spans => spans.length);
            const allDivs = await page.$$eval('div', divs => divs.length);
            const textElements = await page.$$eval('*', elements => 
                elements.filter(el => el.textContent && el.textContent.trim().length > 10).length
            );
            
            logger.analysis('üìä –°–¢–†–£–ö–¢–£–†–ê –°–¢–†–ê–ù–ò–¶–´', {
                '–í—Å–µ–≥–æ span —ç–ª–µ–º–µ–Ω—Ç–æ–≤': allSpans,
                '–í—Å–µ–≥–æ div —ç–ª–µ–º–µ–Ω—Ç–æ–≤': allDivs,
                '–≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º >10 —Å–∏–º–≤–æ–ª–æ–≤': textElements
            });
            
            // –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            const potentialComments = await page.evaluate(() => {
                const elements = Array.from(document.querySelectorAll('*'));
                const comments = [];
                
                elements.forEach(el => {
                    const text = el.textContent?.trim();
                    if (text && 
                        text.length > 20 && 
                        text.length < 300 && 
                        !text.includes('Instagram') && 
                        !text.includes('ago') &&
                        !text.includes('like') &&
                        !text.includes('reply') &&
                        el.children.length === 0) { // –ö–æ–Ω–µ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ –¥–µ—Ç–µ–π
                        
                        comments.push({
                            text: text.substring(0, 50) + '...',
                            tagName: el.tagName,
                            className: el.className || 'no-class',
                            selector: el.getAttribute('data-testid') || 'no-testid'
                        });
                    }
                });
                
                return comments.slice(0, 15); // –ü–µ—Ä–≤—ã–µ 15 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            });
            
            logger.info('üîç –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò:');
            potentialComments.forEach((comment, index) => {
                logger.info(`  ${index + 1}. "${comment.text}" [${comment.tagName}.${comment.className}]`);
            });
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
            const selectorTests = [
                'article span[dir="auto"]',
                'div[role="button"] span',
                'ul li span',
                'div span:not([aria-label])',
                '[data-testid="comment"] span',
                'article div div span'
            ];
            
            logger.info('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–õ–ï–ö–¢–û–†–û–í:');
            for (const selector of selectorTests) {
                try {
                    const elements = await page.$$(selector);
                    logger.info(`  "${selector}" ‚Üí –Ω–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                } catch (error) {
                    logger.info(`  "${selector}" ‚Üí –æ—à–∏–±–∫–∞: ${error.message}`);
                }
            }
            
            return potentialComments;
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error.message);
            return [];
        }
    }   
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    filterCommentsByPosition(comments, excludeCount = null) {
        if (excludeCount === null) {
            excludeCount = this.getExcludeCount();
        }
        
        logger.info(`üéØ –ò—Å–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—ã–µ ${excludeCount} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ ${comments.length}`);
        
        // –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê –ë–ï–ó –ó–ê–©–ò–¢–´ - —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞!
        return comments.slice(excludeCount);
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    getExcludeCount() {
        const fs = require('fs');
        const file = 'bot-start-time.txt';
        let startOfDay;
        try {
            if (fs.existsSync(file)) {
                const t = new Date(fs.readFileSync(file, 'utf8'));
                if (Date.now() - t.getTime() < 24 * 60 * 60 * 1000) {
                    startOfDay = t;
                }
            }
        } catch {}
        if (!startOfDay) {
            startOfDay = new Date();
            try { fs.writeFileSync(file, startOfDay.toISOString()); } catch {}
            logger.info(`üïê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: ${startOfDay.toLocaleString()}`);
        }
        const hoursWorked = Math.floor((Date.now() - startOfDay.getTime()) / (1000 * 60 * 60));
        
        // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –Ω–∞—á–∏–Ω–∞–µ–º —Å 3, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ 3 –∫–∞–∂–¥—ã–π —á–∞—Å
        let excludeCount = 3 + hoursWorked * 3;
        
        // –†–∞–∑—É–º–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - –º–∞–∫—Å–∏–º—É–º 30 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        excludeCount = Math.min(excludeCount, 30);
        
        logger.debug(`‚è∞ –ù—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å ${excludeCount} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (—Ä–∞–±–æ—Ç–∞–µ–º ${hoursWorked} —á)`);
        return excludeCount;
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Instagram
    filterServiceMessages(comments) {
        return comments.filter(text => {
            const patterns = [
                /–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é.*–Ω–µ —É–¥–∞–µ—Ç—Å—è/i,
                /–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∞—É–¥–∏–æ/i,
                /–ø–æ–¥—Ä–æ–±–Ω–µ–µ/i,
                /\d+.*(–æ—Ç–º–µ—Ç–æ–∫|—á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥|–º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥|–¥–Ω–µ–π –Ω–∞–∑–∞–¥)/i,
                /^[a-z0-9_.]+$/i
            ];
            return !patterns.some(p => p.test(text)) && text.includes(' ');
        });
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = new CommentParser();
