/**
 * –ü–∞—Ä—Å–µ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ Instagram
 * –°–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –ø–æ—Å—Ç–∞
 */

const logger = require('../utils/logger.js');
const delays = require('../utils/delays.js');

class CommentParser {
    constructor() {
        this.config = {
            maxComments: 20,           // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            minCommentLength: 10,      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è  
            maxCommentLength: 500,     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            skipBotPatterns: [         // –ü–∞—Ç—Ç–µ—Ä–Ω—ã bot –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                /^(üëç|‚ù§Ô∏è|üî•|üí™|‚ú®)$/,   // –¢–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏
                /^(—Å–ø–∞—Å–∏–±–æ|thanks)$/i,   // –ö–æ—Ä–æ—Ç–∫–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
                /bot/i,                  // –°–æ–¥–µ—Ä–∂–∏—Ç "bot"
                /instagram\.com/i        // –°–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫–∏
            ]
        };
    }

    /**
     * –°–æ–±–∏—Ä–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ø–æ—Å—Ç–∞
     */
    async parseCommentsFromPost(page) {
        try {
            logger.info('üìñ –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...');
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤–Ω–∏–∑ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            await page.evaluate(() => {
                window.scrollBy(0, 300);
            });
            await delays.randomDelay(1000, 2000);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            const commentElements = await page.$$('[role="article"] span[dir="auto"]');
            
            const rawComments = [];
            for (const element of commentElements) {
                try {
                    const text = await element.textContent();
                    if (text && text.length > 5) {
                        rawComments.push(text.trim());
                    }
                } catch (error) {
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    continue;
                }
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            const cleanComments = this.filterAndCleanComments(rawComments);
            
            logger.analysis('–ü–ê–†–°–ò–ù–ì –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í', {
                '–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤': rawComments.length,
                '–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏': cleanComments.length,
                '–í–∑—è—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞': Math.min(cleanComments.length, this.config.maxComments)
            });

            return cleanComments.slice(0, this.config.maxComments);
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', { message: error.message });
            return [];
        }
    }

    /**
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
     */
    filterAndCleanComments(rawComments) {
        const filtered = [];
        
        for (const comment of rawComments) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–µ
            if (comment.length < this.config.minCommentLength || 
                comment.length > this.config.maxCommentLength) {
                continue;
            }

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º bot-–ø–æ–¥–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if (this.isBotLikeComment(comment)) {
                continue;
            }

            // –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            const cleaned = this.cleanComment(comment);
            if (cleaned) {
                filtered.push(cleaned);
            }
        }

        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        return [...new Set(filtered)];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π bot-–ø–æ–¥–æ–±–Ω—ã–º
     */
    isBotLikeComment(comment) {
        return this.config.skipBotPatterns.some(pattern => pattern.test(comment));
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
     */
    cleanComment(comment) {
        return comment
            .replace(/\s+/g, ' ')           // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–∏–Ω
            .replace(/[^\w\s–∞-—è—ë–ê-–Ø–Å!?.,]/gi, '') // –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            .trim();
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∏–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
     */
    analyzeCommentStyle(comments) {
        const analysis = {
            averageLength: 0,
            commonWords: [],
            sentiment: 'neutral',
            style: 'casual'
        };

        if (comments.length === 0) return analysis;

        // –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞
        analysis.averageLength = Math.round(
            comments.reduce((sum, comment) => sum + comment.length, 0) / comments.length
        );

        // –ß–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞ (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        const wordFreq = {};
        comments.forEach(comment => {
            comment.toLowerCase().split(/\s+/).forEach(word => {
                if (word.length > 3) {
                    wordFreq[word] = (wordFreq[word] || 0) + 1;
                }
            });
        });

        analysis.commonWords = Object.entries(wordFreq)
            .sort(([,a], [,b]) => b - a)
            .slice(0, 10)
            .map(([word]) => word);

        logger.analysis('–ê–ù–ê–õ–ò–ó –°–¢–ò–õ–Ø –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í', {
            '–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞': analysis.averageLength,
            '–ß–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞': analysis.commonWords.slice(0, 5).join(', '),
            '–û–±—â–∏–π —Å—Ç–∏–ª—å': analysis.style
        });

        return analysis;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = new CommentParser();
