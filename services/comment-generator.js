/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è Instagram –±–æ—Ç–∞
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI API —á–µ—Ä–µ–∑ OpenRouter 
 * model = "moonshotai/kimi-k2:free" (–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞)
 */

const logger = require('../utils/logger.js');
const { OpenAI } = require('openai');

class CommentGenerator {
    constructor() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        this.openaiClient = new OpenAI({
            baseURL: "https://openrouter.ai/api/v1",
            apiKey: process.env.OPENROUTER_API_KEY
        });
        
        this.model = "moonshotai/kimi-k2:free"; // –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
        this.similarityThreshold = parseInt(process.env.SIMILARITY_CONST || "50");
        this.maxRetries = 5;
        this.retryDelay = parseInt(process.env.PRE_POST_DELAY || "30");
        
        // Fallback –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        this.fallbackComments = [
            "üôÇ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω —Å –º–Ω–µ–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∞.",
            "–û—á–µ–Ω—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–∞–∫–æ–π –≤–∞–∂–Ω—ã–π –ø–æ—Å—Ç.",
            "–ò–º–µ–Ω–Ω–æ —ç—Ç–∏ –º—ã—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–Ω–æ—Å–∏—Ç—å –¥–æ –ª—é–¥–µ–π. –ú–æ–ª–æ–¥–µ—Ü!",
            "–¢–∞–∫–∏–µ —Å–ª–æ–≤–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç –∏ –¥–∞—é—Ç —Å–∏–ª—ã. –°–ø–∞—Å–∏–±–æ!",
            "–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è! –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–¥–µ–ª—è—é —ç—Ç–∏ –≤–∑–≥–ª—è–¥—ã."
        ];
    }

    /**
     * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - Batch –≥–µ–Ω–µ—Ä–∞—Ü–∏—è 5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ)
     * –ü–æ—á–µ–º—É batch: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –ø–æ API –ª–∏–º–∏—Ç–∞–º, –±—ã—Å—Ç—Ä–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞
     */
    async generateBatchComments(contextComments = [], maxAttempts = 5) {
        try {
            logger.info('ü§ñ –ó–∞–ø—É—Å–∫ batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if (!contextComments || contextComments.length === 0) {
                logger.warning(' –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback.');
                return this.fallbackComments.slice(0, 5);
            }

            // –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
            for (let attempt = 1; attempt <= maxAttempts; attempt++) {
                logger.info(`–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ #${attempt} –∏–∑ ${maxAttempts}`);
                
                try {
                    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
                    const prompt = this.buildBatchPrompt(contextComments);
                    
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å retry –ª–æ–≥–∏–∫–æ–π
                    const generatedText = await this.generateWithRetry(prompt);
                    
                    // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                    const parsedComments = this.parseBatchComments(generatedText, 5);
                    
                    if (parsedComments && parsedComments.length >= 5) {
                        logger.success(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${parsedComments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –ø–æ–ø—ã—Ç–∫–∏ #${attempt}`);
                        return parsedComments.slice(0, 5); // –ë–µ—Ä—ë–º —Ä–æ–≤–Ω–æ 5
                    } else {
                        logger.warning(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ #${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–≤—Ç–æ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...`);
                        continue;
                    }
                    
                } catch (error) {
                    logger.warning(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ #${attempt}: ${error.message}`);
                    if (attempt === maxAttempts) {
                        throw error; // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                    }
                }
            }

            // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback.');
            return this.fallbackComments.slice(0, 5);

        } catch (error) {
            logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ generateBatchComments:', error.message);
            return this.fallbackComments.slice(0, 5);
        }
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è batch –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ)
     * –ü–æ—á–µ–º—É —Ç–∞–∫: –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
     */
    buildBatchPrompt(contextComments) {
        let prompt = "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä, –Ω–∞–ø–∏—à–∏ 5 —Ä–∞–∑–Ω—ã—Ö, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:\n";
        prompt += contextComments.join('\n');
        prompt += "\n–ö–∞–∂–¥—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –≤ —Å–ø–æ–∫–æ–π–Ω–æ–π –º–∞–Ω–µ—Ä–µ –∏ –¥–ª–∏–Ω–æ–π –æ–∫–æ–ª–æ 250 —Å–∏–º–≤–æ–ª–æ–≤. ";
        prompt += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å–µ–≥–¥–∞ –Ω—É–º–µ—Ä—É–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å—Ç—Ä–æ–≥–æ –≤ –≤–∏–¥–µ: 1. ... 2. ... 3. ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ!!!";
        
        return prompt;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —É–º–Ω–æ–π retry –ª–æ–≥–∏–∫–æ–π (–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞)
     * –ü–æ—á–µ–º—É —Ä–∞–∑–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏: –¥–ª—è 429 –æ—à–∏–±–æ–∫ –Ω—É–∂–Ω—ã –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—É–∑—ã, –¥–ª—è –¥—Ä—É–≥–∏—Ö - –∫–æ—Ä–æ—Ç–∫–∏–µ
     */
    async generateWithRetry(prompt) {
        let retryCount = 0;
        const maxQuickRetries = 3;
        const hourDelay = 3600; // 60 –º–∏–Ω—É—Ç –¥–ª—è rate limit

        while (true) {
            try {
                const completion = await this.openaiClient.chat.completions.create({
                    model: this.model,
                    messages: [{ role: "user", content: prompt }]
                });

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
                if (!completion?.choices?.[0]?.message?.content) {
                    throw new Error("API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç");
                }

                const generatedText = completion.choices[0].message.content.strip();
                
                if (retryCount > 0) {
                    logger.info(`‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ ${retryCount} –ø–æ–ø—ã—Ç–æ–∫`);
                }
                
                return generatedText;

            } catch (error) {
                retryCount++;
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ 429 –æ—à–∏–±–æ–∫ (rate limit) - –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
                if (error.message.includes("429") || error.status === 429) {
                    if (retryCount <= maxQuickRetries) {
                        logger.warning(`Rate limit –ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxQuickRetries}. –ñ–¥–µ–º ${this.retryDelay} —Å–µ–∫—É–Ω–¥...`);
                        await this.sleep(this.retryDelay * 1000);
                    } else {
                        logger.warning(`Rate limit –ø–æ—Å–ª–µ ${maxQuickRetries} –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ ${hourDelay/60} –º–∏–Ω—É—Ç.`);
                        await this.sleep(hourDelay * 1000);
                    }
                } else {
                    // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—É–∑—ã
                    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ #${retryCount}): ${error.message}`);
                    logger.info(`–ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ ${this.retryDelay} —Å–µ–∫—É–Ω–¥...`);
                    await this.sleep(this.retryDelay * 1000);
                }
            }
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ batch –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞)
     * –ü–æ—á–µ–º—É —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: AI –º–æ–∂–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ-—Ä–∞–∑–Ω–æ–º—É
     */
    parseBatchComments(text, expectedCount = 5) {
        const lines = text.trim().split('\n');
        const comments = [];

        for (const line of lines) {
            // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: —Ü–∏—Ñ—Ä–∞ + —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ + —Ç–µ–∫—Å—Ç
            const match = line.trim().match(/^\d+\s*[\.\)\-\:]*\s*(.+)/);
            if (match) {
                const comment = match[1].trim();
                if (comment && comment.length > 10) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
                    comments.push(comment);
                }
            }
        }

        logger.info(` –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ ${comments.length} –∏–∑ ${expectedCount} –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);

        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        if (comments.length >= expectedCount) {
            return comments.slice(0, expectedCount);
        } else {
            // –ï—Å–ª–∏ –º–∞–ª–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
            logger.warning(` –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ ${expectedCount}. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è.`);
            return [];
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞)
     * –ü–æ—á–µ–º—É –Ω—É–∂–Ω–∞: –∏–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
     */
    calculateSimilarity(textA, textB) {
        if (!textA || !textB) return 0;
        
        const a = textA.toLowerCase();
        const b = textB.toLowerCase();
        
        // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å—Ö–æ–∂–µ—Å—Ç–∏
        const wordsA = a.split(/\s+/);
        const wordsB = b.split(/\s+/);
        
        let commonWords = 0;
        for (const word of wordsA) {
            if (wordsB.includes(word) && word.length > 3) {
                commonWords++;
            }
        }
        
        const maxWords = Math.max(wordsA.length, wordsB.length);
        const similarity = (commonWords / maxWords) * 100;
        
        logger.debug(` –°—Ö–æ–∂–µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤: ${similarity.toFixed(2)}%`);
        return similarity;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
     */
    generateSingleComment(contextComments = []) {
        if (!contextComments || contextComments.length === 0) {
            const randomFallback = this.fallbackComments[Math.floor(Math.random() * this.fallbackComments.length)];
            logger.info('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
            return randomFallback;
        }

        // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º
        const templates = [
            "–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é! {context}",
            "–û—á–µ–Ω—å –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞. {context}", 
            "–ê–±—Å–æ–ª—é—Ç–Ω–æ —Å–æ–≥–ª–∞—Å–µ–Ω. {context}",
            "–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è! {context}",
            "–ú—É–¥—Ä—ã–µ –º—ã—Å–ª–∏. {context}"
        ];

        const template = templates[Math.floor(Math.random() * templates.length)];
        const contextWord = this.extractContextWord(contextComments);
        
        return template.replace("{context}", contextWord ? `–û—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–æ ${contextWord}.` : "");
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    extractContextWord(comments) {
        const allText = comments.join(' ').toLowerCase();
        const words = allText.split(/\s+/).filter(word => word.length > 4);
        const commonWords = ['–æ—á–µ–Ω—å', '–≤—Å–µ–≥–æ', '–±–æ–ª–µ–µ', '—Å–µ–±—è', '–±—ã–ª–æ', '–µ—Å—Ç—å', '–¥–∞–∂–µ'];
        const meaningfulWords = words.filter(word => !commonWords.includes(word));
        
        return meaningfulWords.length > 0 ? meaningfulWords[Math.floor(Math.random() * meaningfulWords.length)] : '';
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–µ–∫
     */
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = new CommentGenerator();
