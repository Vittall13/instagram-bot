/**
 * –ë—É—Ñ–µ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è Instagram –±–æ—Ç–∞
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
 */

const fs = require('fs').promises;
const path = require('path');
const logger = require('../utils/logger.js');

class CommentBuffer {
    constructor() {
        this.bufferFile = path.join('data', 'comment-buffer.json');
        this.maxBufferSize = 10;  // –ú–∞–∫—Å–∏–º—É–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –±—É—Ñ–µ—Ä–µ
        this.minBufferSize = 3;   // –ú–∏–Ω–∏–º—É–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        this.buffer = [];
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        this.ensureDataDirectory();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
     */
    async ensureDataDirectory() {
        try {
            await fs.mkdir('data', { recursive: true });
        } catch (error) {
            // –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±—É—Ñ–µ—Ä –∏–∑ —Ñ–∞–π–ª–∞
     */
    async loadBuffer() {
        try {
            const data = await fs.readFile(this.bufferFile, 'utf8');
            const parsed = JSON.parse(data);
            this.buffer = parsed.comments || [];
            
            logger.info(`üì• –ë—É—Ñ–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω: ${this.buffer.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
            return true;
        } catch (error) {
            // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä
            logger.info('üìÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä');
            this.buffer = [];
            return false;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±—É—Ñ–µ—Ä –≤ —Ñ–∞–π–ª
     */
    async saveBuffer() {
        try {
            const data = {
                comments: this.buffer,
                lastUpdated: new Date().toISOString(),
                version: '1.0'
            };
            
            await fs.writeFile(this.bufferFile, JSON.stringify(data, null, 2), 'utf8');
            logger.debug(`üíæ –ë—É—Ñ–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${this.buffer.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
            return true;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞', { message: error.message });
            return false;
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –±—É—Ñ–µ—Ä
     */
    async addComments(comments) {
        if (!Array.isArray(comments)) {
            comments = [comments];
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        const validComments = comments.filter(comment => {
            return comment && 
                   comment.text && 
                   comment.text.length > 10 && 
                   comment.text.length < 1000;
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        const timestampedComments = validComments.map(comment => ({
            ...comment,
            addedAt: new Date().toISOString(),
            used: false
        }));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
        this.buffer.push(...timestampedComments);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
        if (this.buffer.length > this.maxBufferSize) {
            const removed = this.buffer.splice(0, this.buffer.length - this.maxBufferSize);
            logger.info(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${removed.length} —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ –±—É—Ñ–µ—Ä–∞`);
        }
        
        await this.saveBuffer();
        
        logger.success(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ ${validComments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –±—É—Ñ–µ—Ä. –í—Å–µ–≥–æ: ${this.buffer.length}`);
        return validComments.length;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –±—É—Ñ–µ—Ä–∞
     */
    async getNextComment() {
        await this.loadBuffer();
        
        // –ò—â–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        const unusedComments = this.buffer.filter(comment => !comment.used);
        
        if (unusedComments.length === 0) {
            logger.warning('‚ö†Ô∏è –í –±—É—Ñ–µ—Ä–µ –Ω–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
            return null;
        }
        
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        const selectedComment = unusedComments[0];
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        const index = this.buffer.findIndex(c => c === selectedComment);
        if (index !== -1) {
            this.buffer[index].used = true;
            this.buffer[index].usedAt = new Date().toISOString();
        }
        
        await this.saveBuffer();
        
        logger.info(`üì§ –í–∑—è—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –±—É—Ñ–µ—Ä–∞: "${selectedComment.text.substring(0, 40)}..."`);
        logger.info(`üìä –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: ${unusedComments.length - 1}`);
        
        return selectedComment;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±—É—Ñ–µ—Ä
     */
    async needsRefill() {
        await this.loadBuffer();
        
        const unusedCount = this.buffer.filter(comment => !comment.used).length;
        const needsRefill = unusedCount < this.minBufferSize;
        
        if (needsRefill) {
            logger.info(`üîî –ë—É—Ñ–µ—Ä —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${unusedCount} < ${this.minBufferSize}`);
        }
        
        return needsRefill;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—É—Ñ–µ—Ä–∞
     */
    async getBufferStats() {
        await this.loadBuffer();
        
        const stats = {
            total: this.buffer.length,
            unused: this.buffer.filter(c => !c.used).length,
            used: this.buffer.filter(c => c.used).length,
            sources: {}
        };
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        this.buffer.forEach(comment => {
            const source = comment.source || 'unknown';
            stats.sources[source] = (stats.sources[source] || 0) + 1;
        });
        
        logger.analysis('–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–£–§–ï–†–ê', {
            '–í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤': stats.total,
            '–ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö': stats.unused,
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö': stats.used,
            '–ò—Å—Ç–æ—á–Ω–∏–∫–∏': Object.keys(stats.sources).join(', ')
        });
        
        return stats;
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
     */
    async cleanupUsedComments() {
        await this.loadBuffer();
        
        const beforeCount = this.buffer.length;
        this.buffer = this.buffer.filter(comment => !comment.used);
        const removedCount = beforeCount - this.buffer.length;
        
        if (removedCount > 0) {
            await this.saveBuffer();
            logger.info(`üßπ –û—á–∏—â–µ–Ω–æ ${removedCount} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
        }
        
        return removedCount;
    }

    /**
     * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
     */
    async clearBuffer() {
        this.buffer = [];
        await this.saveBuffer();
        logger.warning('üóëÔ∏è –ë—É—Ñ–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = new CommentBuffer();
